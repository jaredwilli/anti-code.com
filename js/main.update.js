if (typeof anti !== 'object') {
	anti = {};
}

anti = {
	common: {
		init: function() {
			if ($('.lt-ie9').length) {
				console.log('This site is still being developed. Every example is loaded in the panels using ajax onclick of each nav link. Some of the projects which use JavaScript are still a little buggy but they work individually. Eventually they will be interactive and "playable" demo examples loaded into this page.');
			}

			// ie9 - Need to set cors to true for loading each projects assets
			$.support.cors = true;
			anti.init();
		}
	},
	/**!
	 * Stores the panels ID and CSS position coordinates for global access
	 * once generated by looping over the list of .panels
	 */
	panels: {
		activePanel: 'panel5',
		panelsLoaded: ['panel5'],
		panelSliders: []
	},
	layers: {},

	init: function() {
		var b = document.body,
			p = $('.panel'),
			l = $('.layer');

		// load the initial panel's content
		anti.panels.panelsLoaded.push(anti.panels.activePanel);
		anti.panelContent.loadPanel(anti.panels.activePanel);

		// Set up an obj of each panel and their left/top position
		for (var i = 0; i < p.length; i++) {
			var panelId = $(p[i]).attr('id');

			// Skip the loading of panel5
			if (i !== 4) {
				$(p[i]).html('<div class="panel-wrap"></div>');
			}
			anti.panels[panelId] = {};
			anti.panels[panelId].pos = [];
			anti.panels[panelId].pos.push(
				Number($('#'+ panelId).css('left').split('px')[0]),
				Number($('#'+ panelId).css('top').split('px')[0])
			);
		}
		//console.log('panels: ', anti.panels);

        // Set up an obj of each panel and their left/top position
		for (var j = 0; j < l.length; j++) {
			var layerId = $(l[j]).attr('id');

			anti.layers[layerId] = {};
			anti.layers[layerId].pos = [];
			anti.layers[layerId].pos.push(
				Number($('#'+ layerId).css('left').split('px')[0]),
				Number($('#'+ layerId).css('top').split('px')[0]),
				Number($('#'+ layerId).css('width').split('px')[0]),
				Number($('#'+ layerId).css('height').split('px')[0])
			);
		}

		// Setup navigation
		anti.panelNavigation.setUp();

		// Make everything fill the browser viewport
		if (window.attachEvent/* && window.addEventListener !== 'undefined'*/) {
			window.attachEvent('onresize', anti.utils.resizeToScreen);
		} else {
			window.addEventListener('resize', anti.utils.resizeToScreen, false);
		}
		anti.utils.resizeToScreen();

		//anti.lazyLoader(p);
	},

	lazyLoader: function(p) {
		var pid = '';
		for (var i = 0; i < p.length; i++) {
			pid = p[i];

			if (! anti.utils.keyExists(pid.attr('id'), anti.panels.panelsLoaded)) {
				setTimeout(function(pid) {
					anti.panelContent.loadPanel(pid.attr('id'));
					anti.panels.panelsLoaded.push(pid.attr('id'));
					anti.lazyLoader(pid);
				}, 3000)
			} else {
				clearTimeout(pid)
				continue;
			}
		}
	},
	panelNavigation: {
		// Constants for nav functionality
		BASE_DURATION: 1000,
		MAX_DURATION: 4000,
		EASING_TYPE: 'easeOutQuart', // easeOutQuart',
		MENU_SET: $('#main-nav, #default-nav').find('a'),

		// sets up handlers on nav elements and maps handlers, with target params
		setUp: function() {
			$('#default-nav li a').hover(function() {
				$(this).find('span').stop().animate({ bottom: 40 +'px'}, 500);
			}, function() {
				$(this).find('span').stop().animate({ bottom: 0 }, 500);
			});

			anti.panelNavigation.MENU_SET.on('click', function(e) {
				var panelToLoad = $(this).attr('href').split('#')[1];

				//console.log('panelToLoad: ', anti.panels[panelToLoad]);
				anti.panelNavigation.navigateToSection(panelToLoad);

				e.preventDefault();
			});
		},
		navigateToSection: function(panelToLoad) {
			//window.history.pushState(panelToLoad, $('#'+ panelToLoad).find('h2').text(), '#'+ panelToLoad);
			//window.location.hash = '#'+ panelToLoad;

			$('#main-nav, #default-nav').find('.active').removeClass('active');
			$('#main-nav, #default-nav').find('a[href=#' + panelToLoad + ']').addClass('active');

			//console.log(anti.panels, panelToLoad, anti.layers);

			// set now to the section about to be loaded into view
			anti.panels.activePanel = panelToLoad;

			// load target panel's content
			anti.panelContent.loadPanel(panelToLoad);

			anti.panelNavigation.moveAll(panelToLoad);
		},

		// method accepts string of target panel for which to apply position translation animations
		// TODO: BIG TIME - this whole method needs to be done more abstractly and better!!!
		moveAll: function(panelToLoad) {
			//console.log('moveAll called!!');

			//console.log(anti.panels, anti.layers, panelToLoad);
			var winW = window.innerWidth,
				winH = window.innerHeight,
				leftPos = 100,
				topPos = 20;

			// For screens that are smaller than 1280
			if (winW < 1280) {
				leftPos = 10;
				topPos = 0;
			}

			var layer3pos = anti.panels[panelToLoad].pos !== 'undefined' ? anti.panels[panelToLoad].pos : '',
				layer3x = layer3pos[0] * -1 + leftPos,
				layer3y = layer3pos[1] * -1 + topPos;

			//	Eqaution: slope = ((y1 - y2) / (x1 - x2))

			// Slope difference of layer3
			//var slope = ((an.layerPos.layer3[1] - layer3y) / (an.layerPos.layer3[0] - layer3x));

			anti.layers.layer3.pos[2] = anti.panels.panel1.pos[0] - (anti.panels.panel3.pos[0] + winW);
			anti.layers.layer3.pos[3] = anti.panels.panel1.pos[1] - (anti.panels.panel3.pos[0] + winH);

			/**
			 * layer - anti.layer[layer].pos = [x, y, w, h]
			 *
			 * xConst/yConst = (panelToLoad.pos[x, y] - layer3[Width/Height]) * 0.0001; // times 10,000th
			 * layer1,4,5 x  = (layer1,4,5 Width / windowWidth) * ((panel.pos[x] - layer3width) * 0.0001) * 1000 * -1
			 * layers = anti.layer [x, y] - layer[x,y]
			 */
			var xConst = (anti.panels[panelToLoad].pos[0] - anti.layers.layer3.pos[2]) * 0.0001;
			var yConst = (anti.panels[panelToLoad].pos[1] - anti.layers.layer3.pos[3]) * 0.0001;

			//console.log(anti.layers.layer3.pos[2], anti.layers.layer3.pos[3], xConst);

			var layer1x = (anti.layers.layer1.pos[2]) / winW * xConst * 1000 * -1;
			var layer4x = (anti.layers.layer4.pos[2] / winW) * xConst * 1000 * -1;
			var layer5x = (anti.layers.layer5.pos[2] / winW) * xConst * 1000 * -1;

			var bCloudx = (Number(anti.layers.bigCloud.pos[2]) / winW) * xConst * 1000 * -1,
				bCloudy = (Number(anti.layers.bigCloud.pos[3]) / winH) * yConst * 1000 * -1;

			var mCloudx = (Number(anti.layers.medCloud.pos[2]) / winW) * xConst * 1000 * -1,
				mCloudy = (Number(anti.layers.medCloud.pos[3]) / winH) * yConst * 1000 * -1;

			var sCloudx = (Number(anti.layers.smCloud.pos[2]) / winW) * xConst * 1000 * -1,
				sCloudy = (Number(anti.layers.smCloud.pos[3]) / winH) * yConst * 1000 * -1;

			var layers = {
				layer3: [layer3x, layer3y],
				layer1: [
					anti.layers.layer1.pos[0] - layer1x,
					Number($('#layer1').css('bottom').split('px')[0])
				],
				layer4: [
					anti.layers.layer4.pos[0] - layer4x,
					Number($('#layer4').css('bottom').split('px')[0])
				],
				layer5: [
					anti.layers.layer5.pos[0] - layer5x,
					Number($('#layer5').css('bottom').split('px')[0])
				],
				bigCloud: [
					anti.layers.bigCloud.pos[0] - bCloudx,
					anti.layers.bigCloud.pos[1] - bCloudy
				],
				medCloud: [
					anti.layers.medCloud.pos[0] - mCloudx,
					anti.layers.medCloud.pos[1] - mCloudy
				],
				smCloud: [
					anti.layers.smCloud.pos[0] - sCloudx,
					anti.layers.smCloud.pos[1] - sCloudy
				]
			};

			anti.panelNavigation.animateEm(layers);
		},
		animateEm: function(layers) {
			// check for travel distance to set animation duration based on how far to slide
			var xDiff = Math.abs((anti.layers.layer3.pos[2] + 100000) - (layers.layer3[0] + 100000));
            // calculate the adjusted animation duration
            var thisDuration = (xDiff / (anti.layers.layer3.pos[2] * (anti.panelNavigation.MAX_DURATION - anti.panelNavigation.BASE_DURATION))) + anti.panelNavigation.BASE_DURATION;

			// run the animations
			$('#layer3').stop().animate({ left: layers.layer3[0] + 'px', top: layers.layer3[1] + 'px' }, thisDuration, anti.EASING_TYPE);

			$('#layer1').stop().animate({ left: layers.layer1[0] + 'px' }, thisDuration, anti.panelNavigation.EASING_TYPE);
			$('#layer4').stop().animate({ left: layers.layer4[0] + 'px' }, thisDuration, anti.panelNavigation.EASING_TYPE);
			$('#layer5').stop().animate({ left: layers.layer5[0] + 'px' }, thisDuration, anti.panelNavigation.EASING_TYPE);

			$('#bigCloud').stop().animate({
				left: layers.bigCloud[0] + 'px',
				top: layers.bigCloud[1] + 'px'
			}, thisDuration, anti.EASING_TYPE);

			$('#medCloud').stop().animate({
				left: layers.medCloud[0] + 'px',
				top: layers.medCloud[1] + 'px'
			}, thisDuration, anti.EASING_TYPE);

			$('#smCloud').stop().animate({
				left: layers.smCloud[0] + 'px',
				top: layers.smCloud[1] + 'px'
			}, thisDuration, anti.EASING_TYPE);
		}
	},
	panelContent: {
		loadPanel: function(panelTo) {
			if (panelTo === 'panel14' || panelTo === 'panel15') return;

			var isLoaded = anti.utils.keyExists(panelTo, anti.panels.panelsLoaded);

			$('.panel').find('.panel-wrap').fadeOut(500);

			// Cache the files loaded for each panel and enable event firing afterDOMready for each
			// If the panel is already loaded then show the hidden panel-wrap
			if (isLoaded) {
				anti.panelContent.showPanelContent(panelTo);
			} else {
				anti.panelContent.loadPanelContent(panelTo);
			}
		},
		showPanelContent: function(panelToShow) {
			$('#'+ panelToShow).find('.panel-wrap').stop().delay(1000).fadeIn(500);
		},
		loadPanelContent: function(panelToLoad) {
			return $.ajax({
				crossDomain: true,
				type: 'POST',
				dataType: 'html',
				url: 'panels/' + panelToLoad + '/index.html'
			})
			.done(function(panelContent) {
				//panelContent
				$('#'+ panelToLoad).find('.panel-wrap').hide().html(panelContent);

				anti.panels.panelsLoaded.push(panelToLoad);
			})
			.fail(function(jqXHR, status, error) {
				if ($('.lt-ie9').length) {
					console.log('Status: '+ status +'"\n" Error: '+ error);
				}
			})
			.always(function() {
				anti.panelContent.makeSlider(panelToLoad);
				anti.panelContent.showPanelContent(panelToLoad);
			});
		},
		makeSlider: function(panel) {
			if ($('#'+ panel).find('.gallery-thumbs').length < 1) {
				return;
			}

			var width = Number($('.panel article .project-content').width()),
				thumbs = $('#'+ panel).find('.gallery-thumbs li'),
				gallery = $('#'+ panel).find('.gallery'),
				galleryStr = '<ul style="'+ width * thumbs.length +'px">',
				visibleSlide = 'hidden';

			// Add current class to first thumbnail image
			//$(thumbs[0]).find('a').addClass('current');

			// Loop over the thumbnails to generate the slides for each
			for (var i = 0; i < thumbs.length; i++) {
				//if (i === 0) return;

				var para = $(thumbs[i]).find('p'),
					href = $(thumbs[i]).find('a').attr('href').split('#')[1],
					video = $(thumbs[i]).find('a').attr('data-vid');

				//console.log(thumbs.length, thumbs[i], href);

				if (href === 'slide-1') {
					visibleSlide = 'active';
				} else {
					visibleSlide = '';
				}

				galleryStr += '<li id="'+ href +'" class="'+ visibleSlide +'">';

				// Is the slide displaying a video or an image
				if (typeof video !== 'undefined') {
					galleryStr += '<iframe src="'+ video +'" width="655" height="561" frameborder="0" allowfullscreen></iframe>';
				} else {
					galleryStr += '<img src="panels/'+ panel +'/'+ href +'.jpg" alt="'+ panel +' '+ href +'" />';
				}

				galleryStr += '<p>'+ para.text() +'</p></li>';
				para.remove();
			}
			galleryStr += '</ul>';
			gallery.append(galleryStr);

			if ($('#default-nav li a').length > 0) {
				$('#default-nav li a').css({ opacity: 0.7 });
				$('#default-nav li a').hover(function() {
					$(this).stop().css({ opacity: 1 });
				}, function() {
					$(this).stop().css({ opacity: 0.7 });
				});
			}

			// Create click handler for thumbnails so they show larger versions correctly
			thumbs.find('a').on('click', function(e) {
				e.preventDefault();

				// use href of thumbnail clicked to find slide ID to display
				var slide = $(this).attr('href');

				// swap the active state of the current thumbnail with clicked thumbnail
				thumbs.find('a').removeClass('current').animate({ opacity: 0.7 }, 200);
				$(this).addClass('current').animate({ opacity: 1 }, 200);

				// hide all slides before showing slide for clicked thumbnail
				gallery.find('li').removeClass('active').fadeOut(200);
				gallery.find(slide).addClass('active').fadeIn(200);
			});
		}
	},
	utils: {
		resizeToScreen: function() {
			var winW = window.innerWidth,
				winH = window.innerHeight;

			anti.layers.layer3.pos[2] = winW -(winW * 0.20);

			var thum = (anti.layers.layer3.pos[2] / 3.2) - 0.6 * 3 + 4;

			//console.log(anti.layers, thum);

			$('body').css({
				height: winH,
				width: winW
			});
			$('#layer3').css({
				width: (winW - (winW * 0.20) + 30) + 'px',
				height: winH + 'px',
				left: '100px'
			});
			$('.panel').css({
				//width: winW - (3 * $('#layer3').css('left').split('px')[0]) + 'px',
				height: winH - (winH * 0.179) + 'px'
			});

			var can = document.getElementById('bgGame');
			can.width = winW;
			can.height = winH - 70;

			// For the panels content like the defaults thumbnails,
			// resize the LI's to make bgImage size according to layer3 width
			if ($('#default-nav').length > 0) {
				//console.log($('.panel').css('width'));
				$('#default-nav').parent().css({
					//	width: thum + 4 +'px'
					height: Number($('#panel5').height()) -8 +'px'
				});
			}

			// Fix the title LI block
			document.getElementById('default-nav').getElementsByTagName('img')[0].onload = function() {
				//console.log('true');
				$('#default-nav li, #default-nav li a, #default-nav .panel5, #default-nav .panel5 a').height(this.height);
			};

			// If the window width has a smaller size then scale panel width up
			if (window.innerWidth < 1280) {
				$('body').css({
					height: winH,
					width: winW
				});
				$('#layer3').css({
					left: (window.innerWidth * 0.2) % 2 +'px',
					top: 0,
					width: winW - (winW * 0.05) + 'px',
					height: winH - (winH * 0.025) + 'px'
				});
				$('.panel .gallery img, .panel .gallery iframe').css({
					width: (winW - (winW * 0.05)) * 0.20 +'px'
				});
				$('.panel').css({
					paddingLeft: 0.500 +'em'
					//height: winH - (winH * 0.05) + 'px'
				});
			}
			if (winW > 1130) {
				$('#layer3').css({
					width: '1054px'
				});
			}
		},
		isArray: function(array) {
			return (array.constructor.toString().indexOf('Array') !== -1);
		},
		randomKey: function(array) {
			return array[Math.floor(Math.random() * array.length)];
		},
		keyExists: function(key, search) {
			if (!search || (search.constructor !== Array && search.constructor !== Object)) { return false; }
			for (var i = 0; i < search.length; i++) {
				if (search[i] === key) { return true; }
			}
			return key in search;
		}
	}
};

UTIL = {
	fire: function(func, funcname, args) {
		var namespace = anti;
		funcname = (funcname === undefined) ? 'init' : funcname;
		if (func !== '' && namespace[func] && typeof namespace[func][funcname] == 'function') {
			namespace[func][funcname](args);
		}
	},
	loadEvents: function() {
		var b = document.body;
		var bid = b.id;
		//console.log(bid);
		UTIL.fire('common');
		UTIL.fire(bid);
/*
		var classes = b.clasaname.split(/\s+/), test = classes.length;
		for (var i = 0; i < test; i++) {
			UTIL.fire(classes[i]);
			UTIL.fire(classes[i], bid);
		};
*/
		UTIL.fire('common', 'finalize');
	}
};
//kick it all off here
$(document).ready(UTIL.loadEvents);